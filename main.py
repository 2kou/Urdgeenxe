#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bot Telegram T√©l√©foot avec syst√®me de gestion de licences
Utilise Telethon pour la communication avec l'API Telegram
"""

import asyncio
import signal
import sys
import os
from datetime import datetime
from telethon import TelegramClient
from telethon.errors import AuthKeyError, FloodWaitError

from config import API_ID, API_HASH, BOT_TOKEN, ADMIN_ID
from user_manager import UserManager
from bot_handlers import BotHandlers
from telefeed_commands import register_all_handlers
from button_interface import ButtonInterface
from keep_alive import keep_alive

class TelefootBot:
    """Bot Telegram principal avec gestion de licences"""
    
    def __init__(self):
        self.client = None
        self.user_manager = UserManager()
        self.handlers = None
        self.button_interface = None
        self.running = False
    
    async def initialize(self):
        """Initialise le client Telegram et les handlers"""
        try:
            # Cr√©ation du client Telegram
            self.client = TelegramClient(
                'bot_session', 
                API_ID, 
                API_HASH
            )
            
            # D√©marrage avec le token bot
            await self.client.start(bot_token=BOT_TOKEN)
            
            # V√©rification que le bot est bien connect√©
            me = await self.client.get_me()
            print(f"ü§ñ Bot connect√© : @{me.username} ({me.id})")
            
            # Initialisation des handlers
            self.handlers = BotHandlers(self.client, self.user_manager)
            
            # Initialisation de l'interface √† boutons
            self.button_interface = ButtonInterface(self.client, self.user_manager)
            
            # Enregistrement des handlers TeleFeed
            await register_all_handlers(self.client, ADMIN_ID, API_ID, API_HASH)
            
            # Restaurer automatiquement les sessions TeleFeed existantes
            from telefeed_commands import telefeed_manager
            await self.restore_telefeed_sessions(telefeed_manager)
            
            print("‚úÖ Bot initialis√© avec succ√®s")
            print("üöÄ Fonctionnalit√©s TeleFeed activ√©es")
            return True
            
        except AuthKeyError:
            print("‚ùå Erreur d'authentification (API_HASH ou BOT_TOKEN invalide)")
            return False
        except FloodWaitError as e:
            print(f"‚ùå Limite de taux d√©pass√©e, attendre {e.seconds} secondes")
            return False
        except Exception as e:
            print(f"‚ùå Erreur d'initialisation : {e}")
            return False
    
    async def restore_telefeed_sessions(self, telefeed_manager):
        """Restaure automatiquement les sessions TeleFeed existantes"""
        print("üîÑ Restauration des sessions TeleFeed...")
        
        restored_count = 0
        total_sessions = len(telefeed_manager.sessions)
        
        for phone_number, session_data in telefeed_manager.sessions.items():
            if isinstance(session_data, dict) and session_data.get('connected'):
                if phone_number.startswith('temp_'):
                    continue  # Ignorer les sessions temporaires
                
                try:
                    session_name = f"telefeed_{phone_number}"
                    
                    # V√©rifier si le fichier de session existe
                    if os.path.exists(f"{session_name}.session"):
                        from config import API_ID, API_HASH
                        from telethon import TelegramClient
                        
                        client = TelegramClient(session_name, API_ID, API_HASH)
                        await client.connect()
                        
                        # V√©rifier si la session est toujours valide
                        if await client.is_user_authorized():
                            telefeed_manager.clients[phone_number] = client
                            # Marquer la session comme restaur√©e
                            telefeed_manager.sessions[phone_number]['restored_at'] = datetime.now().isoformat()
                            
                            # Configurer les gestionnaires de redirection
                            await telefeed_manager.setup_redirection_handlers(client, phone_number)
                            
                            restored_count += 1
                            print(f"‚úÖ Session restaur√©e pour {phone_number}")
                        else:
                            print(f"‚ö†Ô∏è Session expir√©e pour {phone_number}")
                            # Marquer la session comme expir√©e
                            telefeed_manager.sessions[phone_number]['connected'] = False
                            telefeed_manager.sessions[phone_number]['expired_at'] = datetime.now().isoformat()
                            try:
                                await client.disconnect()
                            except:
                                pass
                    else:
                        print(f"‚ö†Ô∏è Fichier de session manquant pour {phone_number}")
                        # Marquer la session comme manquante
                        telefeed_manager.sessions[phone_number]['connected'] = False
                        telefeed_manager.sessions[phone_number]['missing_file'] = True
                        
                except Exception as e:
                    print(f"‚ùå Erreur lors de la restauration de {phone_number}: {e}")
                    # Marquer la session comme en erreur
                    telefeed_manager.sessions[phone_number]['connected'] = False
                    telefeed_manager.sessions[phone_number]['error'] = str(e)
        
        # Sauvegarder les changements
        telefeed_manager.save_all_data()
        print(f"üîÑ {restored_count}/{total_sessions} sessions TeleFeed restaur√©es")
    
    async def start(self):
        """D√©marre le bot avec reconnexion automatique"""
        retry_count = 0
        max_retries = 5
        
        while retry_count < max_retries:
            try:
                if not await self.initialize():
                    retry_count += 1
                    print(f"‚ùå √âchec d'initialisation, tentative {retry_count}/{max_retries}")
                    await asyncio.sleep(10 * retry_count)  # D√©lai croissant
                    continue
                
                self.running = True
                print("üöÄ Bot d√©marr√© et en attente de messages...")
                
                # Nettoyage p√©riodique des utilisateurs expir√©s
                cleanup_task = asyncio.create_task(self.cleanup_task())
                
                # Syst√®me de maintien d'activit√© renforc√©
                keep_alive.start()
                heartbeat_task = asyncio.create_task(self.heartbeat_task())
                
                # Boucle principale avec gestion des d√©connexions
                if self.client:
                    await self.client.run_until_disconnected()
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  Arr√™t du bot demand√©")
                break
            except Exception as e:
                print(f"‚ùå Erreur durant l'ex√©cution : {e}")
                retry_count += 1
                if retry_count < max_retries:
                    print(f"üîÑ Reconnexion automatique dans 30 secondes... ({retry_count}/{max_retries})")
                    await asyncio.sleep(30)
                else:
                    print("‚ùå Nombre maximum de tentatives atteint")
                    break
            finally:
                await self.stop()
                
        return retry_count < max_retries
    
    async def cleanup_task(self):
        """T√¢che de nettoyage p√©riodique"""
        while self.running:
            try:
                # Attendre 1 heure
                await asyncio.sleep(3600)
                
                # Nettoyer les utilisateurs expir√©s
                cleaned = self.user_manager.cleanup_expired_users()
                if cleaned > 0:
                    print(f"üßπ {cleaned} utilisateurs expir√©s nettoy√©s")
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"‚ùå Erreur dans cleanup_task : {e}")
    
    async def heartbeat_task(self):
        """T√¢che de v√©rification de la connexion"""
        while self.running:
            try:
                # V√©rifier toutes les 5 minutes
                await asyncio.sleep(300)
                
                if self.client and self.client.is_connected():
                    # Test de connexion simple
                    try:
                        await self.client.get_me()
                        print("üíì Heartbeat - Connexion OK")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Probl√®me de connexion d√©tect√©: {e}")
                        # Tenter une reconnexion
                        try:
                            await self.client.connect()
                            print("üîÑ Reconnexion r√©ussie")
                        except:
                            print("‚ùå √âchec de reconnexion")
                else:
                    print("‚ö†Ô∏è Client d√©connect√©")
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                print(f"‚ùå Erreur dans heartbeat_task : {e}")
    
    async def stop(self):
        """Arr√™te le bot proprement"""
        self.running = False
        if self.client and self.client.is_connected():
            await self.client.disconnect()
        print("‚èπÔ∏è  Bot arr√™t√©")

def signal_handler(sig, frame):
    """Gestionnaire de signal pour arr√™t propre"""
    print(f"\nüõë Signal {sig} re√ßu, arr√™t du bot...")
    sys.exit(0)

async def main():
    """Fonction principale"""
    # Gestion des signaux pour arr√™t propre
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # Cr√©ation et d√©marrage du bot
    bot = TelefootBot()
    
    try:
        await bot.start()
    except Exception as e:
        print(f"‚ùå Erreur fatale : {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    try:
        # Lancement du bot
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã Au revoir !")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå Erreur critique : {e}")
        sys.exit(1)
