"""
Syst√®me de monitoring automatique pour Render.com
D√©tecte les probl√®mes et envoie un message de r√©activation
"""

import asyncio
import logging
import os
import time
from datetime import datetime
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError

# Configuration
API_ID = int(os.getenv('API_ID', '29177661'))
API_HASH = os.getenv('API_HASH', 'a8639172fa8d35dbfd8ea46286d349ab')
BOT_TOKEN = os.getenv('BOT_TOKEN', '7573497633:AAHk9K15yTCiJP-zruJrc9v8eK8I9XhjyH4')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1190237801'))

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class RenderMonitor:
    def __init__(self):
        self.client = TelegramClient('render_monitor', API_ID, API_HASH)
        self.last_activity = time.time()
        self.monitoring = True
        self.restart_count = 0
        
    async def start(self):
        """D√©marre le syst√®me de monitoring"""
        await self.client.start(bot_token=BOT_TOKEN)
        logger.info("üîÑ Syst√®me de monitoring Render.com d√©marr√©")
        
        # Handler pour le message de r√©activation
        @self.client.on(events.NewMessage(pattern=r'(?i).*r√©activer.*bot.*automatique.*'))
        async def reactivation_handler(event):
            """R√©pond automatiquement aux messages de r√©activation"""
            if event.sender_id == ADMIN_ID:
                await event.reply("ok")
                logger.info("‚úÖ R√©ponse automatique 'ok' envoy√©e")
                self.restart_count += 1
                
                # Notification de statut
                await self.client.send_message(
                    ADMIN_ID,
                    f"üîÑ **Syst√®me r√©activ√© automatiquement**\n\n"
                    f"‚è∞ Heure: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
                    f"üî¢ Red√©marrage #: {self.restart_count}\n"
                    f"üåê Statut: Bot op√©rationnel\n"
                    f"üì° Render.com: Service actif"
                )
        
        # Handler pour les messages de test de vie
        @self.client.on(events.NewMessage(pattern=r'(?i).*(ping|test|alive|status).*'))
        async def health_check_handler(event):
            """R√©pond aux v√©rifications de sant√©"""
            if event.sender_id == ADMIN_ID:
                await event.reply(
                    f"üü¢ **Bot actif sur Render.com**\n\n"
                    f"‚è∞ Uptime: {time.time() - self.last_activity:.0f}s\n"
                    f"üîÑ Red√©marrages: {self.restart_count}\n"
                    f"üìä Statut: Op√©rationnel"
                )
        
        # Monitoring continu
        await self.monitor_loop()
    
    async def monitor_loop(self):
        """Boucle principale de monitoring"""
        while self.monitoring:
            try:
                # Mise √† jour de l'activit√©
                self.last_activity = time.time()
                
                # V√©rification p√©riodique (toutes les 5 minutes)
                await asyncio.sleep(300)
                
                # Envoi d'un heartbeat au serveur
                await self.send_heartbeat()
                
            except Exception as e:
                logger.error(f"Erreur dans le monitoring: {e}")
                await asyncio.sleep(60)  # Attendre 1 minute avant de r√©essayer
    
    async def send_heartbeat(self):
        """Envoie un signal de vie"""
        try:
            await self.client.send_message(
                ADMIN_ID,
                f"üíì Heartbeat - {datetime.now().strftime('%H:%M:%S')}",
                silent=True
            )
        except Exception as e:
            logger.warning(f"Impossible d'envoyer le heartbeat: {e}")

    async def handle_restart_command(self, event):
        """G√®re la commande de red√©marrage"""
        try:
            await event.reply("üîÑ Red√©marrage du syst√®me...")
            logger.info("Red√©marrage demand√© par l'admin")
            
            # Notification avant red√©marrage
            await self.client.send_message(
                ADMIN_ID,
                "üîÑ **Red√©marrage en cours...**\n\n"
                "‚è∞ Le bot red√©marre automatiquement\n"
                "üîî Vous recevrez une notification quand il sera pr√™t"
            )
            
            # Red√©marrage propre
            await self.client.disconnect()
            await asyncio.sleep(2)
            await self.start()
            
        except Exception as e:
            logger.error(f"Erreur lors du red√©marrage: {e}")

if __name__ == "__main__":
    monitor = RenderMonitor()
    
    try:
        asyncio.run(monitor.start())
    except KeyboardInterrupt:
        logger.info("Arr√™t du monitoring")
    except Exception as e:
        logger.error(f"Erreur fatale: {e}")